// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: LogProtocol.proto

/*
	Package LogProtocol is a generated protocol buffer package.

	It is generated from these files:
		LogProtocol.proto

	It has these top-level messages:
		TableName
		Column
		ColumnInfo
		TableInfo
		RowChangedEvent
		DDLEvent
*/
package LogProtocol

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ColumnFlagType int32

const (
	ColumnFlagType_BinaryFlag ColumnFlagType = 0
)

var ColumnFlagType_name = map[int32]string{
	0: "BinaryFlag",
}
var ColumnFlagType_value = map[string]int32{
	"BinaryFlag": 0,
}

func (x ColumnFlagType) String() string {
	return proto.EnumName(ColumnFlagType_name, int32(x))
}
func (ColumnFlagType) EnumDescriptor() ([]byte, []int) { return fileDescriptorLogProtocol, []int{0} }

type TableName struct {
	Schema    string `protobuf:"bytes,1,opt,name=schema,proto3" json:"schema,omitempty"`
	Table     string `protobuf:"bytes,2,opt,name=table,proto3" json:"table,omitempty"`
	TableID   int64  `protobuf:"varint,3,opt,name=tableID,proto3" json:"tableID,omitempty"`
	Partition int64  `protobuf:"varint,4,opt,name=partition,proto3" json:"partition,omitempty"`
}

func (m *TableName) Reset()                    { *m = TableName{} }
func (m *TableName) String() string            { return proto.CompactTextString(m) }
func (*TableName) ProtoMessage()               {}
func (*TableName) Descriptor() ([]byte, []int) { return fileDescriptorLogProtocol, []int{0} }

func (m *TableName) GetSchema() string {
	if m != nil {
		return m.Schema
	}
	return ""
}

func (m *TableName) GetTable() string {
	if m != nil {
		return m.Table
	}
	return ""
}

func (m *TableName) GetTableID() int64 {
	if m != nil {
		return m.TableID
	}
	return 0
}

func (m *TableName) GetPartition() int64 {
	if m != nil {
		return m.Partition
	}
	return 0
}

type Column struct {
	Type        []byte `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	WhereHandle bool   `protobuf:"varint,2,opt,name=whereHandle,proto3" json:"whereHandle,omitempty"`
	// Types that are valid to be assigned to ColumnTypePresent:
	//	*Column_Flag
	ColumnTypePresent isColumn_ColumnTypePresent `protobuf_oneof:"columnType_present"`
	Value             []byte                     `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *Column) Reset()                    { *m = Column{} }
func (m *Column) String() string            { return proto.CompactTextString(m) }
func (*Column) ProtoMessage()               {}
func (*Column) Descriptor() ([]byte, []int) { return fileDescriptorLogProtocol, []int{1} }

type isColumn_ColumnTypePresent interface {
	isColumn_ColumnTypePresent()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Column_Flag struct {
	Flag ColumnFlagType `protobuf:"varint,3,opt,name=flag,proto3,enum=ColumnFlagType,oneof"`
}

func (*Column_Flag) isColumn_ColumnTypePresent() {}

func (m *Column) GetColumnTypePresent() isColumn_ColumnTypePresent {
	if m != nil {
		return m.ColumnTypePresent
	}
	return nil
}

func (m *Column) GetType() []byte {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *Column) GetWhereHandle() bool {
	if m != nil {
		return m.WhereHandle
	}
	return false
}

func (m *Column) GetFlag() ColumnFlagType {
	if x, ok := m.GetColumnTypePresent().(*Column_Flag); ok {
		return x.Flag
	}
	return ColumnFlagType_BinaryFlag
}

func (m *Column) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Column) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Column_OneofMarshaler, _Column_OneofUnmarshaler, _Column_OneofSizer, []interface{}{
		(*Column_Flag)(nil),
	}
}

func _Column_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Column)
	// columnType_present
	switch x := m.ColumnTypePresent.(type) {
	case *Column_Flag:
		_ = b.EncodeVarint(3<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.Flag))
	case nil:
	default:
		return fmt.Errorf("Column.ColumnTypePresent has unexpected type %T", x)
	}
	return nil
}

func _Column_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Column)
	switch tag {
	case 3: // columnType_present.flag
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.ColumnTypePresent = &Column_Flag{ColumnFlagType(x)}
		return true, err
	default:
		return false, nil
	}
}

func _Column_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Column)
	// columnType_present
	switch x := m.ColumnTypePresent.(type) {
	case *Column_Flag:
		n += proto.SizeVarint(3<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.Flag))
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type ColumnInfo struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type []byte `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
}

func (m *ColumnInfo) Reset()                    { *m = ColumnInfo{} }
func (m *ColumnInfo) String() string            { return proto.CompactTextString(m) }
func (*ColumnInfo) ProtoMessage()               {}
func (*ColumnInfo) Descriptor() ([]byte, []int) { return fileDescriptorLogProtocol, []int{2} }

func (m *ColumnInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ColumnInfo) GetType() []byte {
	if m != nil {
		return m.Type
	}
	return nil
}

type TableInfo struct {
	Schema     string        `protobuf:"bytes,1,opt,name=schema,proto3" json:"schema,omitempty"`
	Table      string        `protobuf:"bytes,2,opt,name=table,proto3" json:"table,omitempty"`
	TableID    int64         `protobuf:"varint,3,opt,name=tableID,proto3" json:"tableID,omitempty"`
	ColumnInfo []*ColumnInfo `protobuf:"bytes,4,rep,name=columnInfo" json:"columnInfo,omitempty"`
}

func (m *TableInfo) Reset()                    { *m = TableInfo{} }
func (m *TableInfo) String() string            { return proto.CompactTextString(m) }
func (*TableInfo) ProtoMessage()               {}
func (*TableInfo) Descriptor() ([]byte, []int) { return fileDescriptorLogProtocol, []int{3} }

func (m *TableInfo) GetSchema() string {
	if m != nil {
		return m.Schema
	}
	return ""
}

func (m *TableInfo) GetTable() string {
	if m != nil {
		return m.Table
	}
	return ""
}

func (m *TableInfo) GetTableID() int64 {
	if m != nil {
		return m.TableID
	}
	return 0
}

func (m *TableInfo) GetColumnInfo() []*ColumnInfo {
	if m != nil {
		return m.ColumnInfo
	}
	return nil
}

type RowChangedEvent struct {
	StartTs          uint64             `protobuf:"varint,1,opt,name=startTs,proto3" json:"startTs,omitempty"`
	CommitTs         uint64             `protobuf:"varint,2,opt,name=commitTs,proto3" json:"commitTs,omitempty"`
	RowID            int64              `protobuf:"varint,3,opt,name=rowID,proto3" json:"rowID,omitempty"`
	Table            *TableName         `protobuf:"bytes,4,opt,name=table" json:"table,omitempty"`
	Delete           bool               `protobuf:"varint,5,opt,name=delete,proto3" json:"delete,omitempty"`
	TableInfoVersion uint64             `protobuf:"varint,6,opt,name=tableInfoVersion,proto3" json:"tableInfoVersion,omitempty"`
	IndieMarkCol     string             `protobuf:"bytes,7,opt,name=indieMarkCol,proto3" json:"indieMarkCol,omitempty"`
	Columns          map[string]*Column `protobuf:"bytes,8,rep,name=columns" json:"columns,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	Keys             []string           `protobuf:"bytes,9,rep,name=keys" json:"keys,omitempty"`
}

func (m *RowChangedEvent) Reset()                    { *m = RowChangedEvent{} }
func (m *RowChangedEvent) String() string            { return proto.CompactTextString(m) }
func (*RowChangedEvent) ProtoMessage()               {}
func (*RowChangedEvent) Descriptor() ([]byte, []int) { return fileDescriptorLogProtocol, []int{4} }

func (m *RowChangedEvent) GetStartTs() uint64 {
	if m != nil {
		return m.StartTs
	}
	return 0
}

func (m *RowChangedEvent) GetCommitTs() uint64 {
	if m != nil {
		return m.CommitTs
	}
	return 0
}

func (m *RowChangedEvent) GetRowID() int64 {
	if m != nil {
		return m.RowID
	}
	return 0
}

func (m *RowChangedEvent) GetTable() *TableName {
	if m != nil {
		return m.Table
	}
	return nil
}

func (m *RowChangedEvent) GetDelete() bool {
	if m != nil {
		return m.Delete
	}
	return false
}

func (m *RowChangedEvent) GetTableInfoVersion() uint64 {
	if m != nil {
		return m.TableInfoVersion
	}
	return 0
}

func (m *RowChangedEvent) GetIndieMarkCol() string {
	if m != nil {
		return m.IndieMarkCol
	}
	return ""
}

func (m *RowChangedEvent) GetColumns() map[string]*Column {
	if m != nil {
		return m.Columns
	}
	return nil
}

func (m *RowChangedEvent) GetKeys() []string {
	if m != nil {
		return m.Keys
	}
	return nil
}

type DDLEvent struct {
	StartTs   uint64     `protobuf:"varint,1,opt,name=startTs,proto3" json:"startTs,omitempty"`
	CommitTs  uint64     `protobuf:"varint,2,opt,name=commitTs,proto3" json:"commitTs,omitempty"`
	Schema    string     `protobuf:"bytes,3,opt,name=schema,proto3" json:"schema,omitempty"`
	Table     string     `protobuf:"bytes,4,opt,name=table,proto3" json:"table,omitempty"`
	TableInfo *TableInfo `protobuf:"bytes,5,opt,name=tableInfo" json:"tableInfo,omitempty"`
	Query     string     `protobuf:"bytes,6,opt,name=query,proto3" json:"query,omitempty"`
	Type      []byte     `protobuf:"bytes,7,opt,name=type,proto3" json:"type,omitempty"`
}

func (m *DDLEvent) Reset()                    { *m = DDLEvent{} }
func (m *DDLEvent) String() string            { return proto.CompactTextString(m) }
func (*DDLEvent) ProtoMessage()               {}
func (*DDLEvent) Descriptor() ([]byte, []int) { return fileDescriptorLogProtocol, []int{5} }

func (m *DDLEvent) GetStartTs() uint64 {
	if m != nil {
		return m.StartTs
	}
	return 0
}

func (m *DDLEvent) GetCommitTs() uint64 {
	if m != nil {
		return m.CommitTs
	}
	return 0
}

func (m *DDLEvent) GetSchema() string {
	if m != nil {
		return m.Schema
	}
	return ""
}

func (m *DDLEvent) GetTable() string {
	if m != nil {
		return m.Table
	}
	return ""
}

func (m *DDLEvent) GetTableInfo() *TableInfo {
	if m != nil {
		return m.TableInfo
	}
	return nil
}

func (m *DDLEvent) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

func (m *DDLEvent) GetType() []byte {
	if m != nil {
		return m.Type
	}
	return nil
}

func init() {
	proto.RegisterType((*TableName)(nil), "TableName")
	proto.RegisterType((*Column)(nil), "Column")
	proto.RegisterType((*ColumnInfo)(nil), "ColumnInfo")
	proto.RegisterType((*TableInfo)(nil), "TableInfo")
	proto.RegisterType((*RowChangedEvent)(nil), "RowChangedEvent")
	proto.RegisterType((*DDLEvent)(nil), "DDLEvent")
	proto.RegisterEnum("ColumnFlagType", ColumnFlagType_name, ColumnFlagType_value)
}
func (m *TableName) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TableName) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Schema) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintLogProtocol(dAtA, i, uint64(len(m.Schema)))
		i += copy(dAtA[i:], m.Schema)
	}
	if len(m.Table) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintLogProtocol(dAtA, i, uint64(len(m.Table)))
		i += copy(dAtA[i:], m.Table)
	}
	if m.TableID != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintLogProtocol(dAtA, i, uint64(m.TableID))
	}
	if m.Partition != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintLogProtocol(dAtA, i, uint64(m.Partition))
	}
	return i, nil
}

func (m *Column) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Column) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintLogProtocol(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if m.WhereHandle {
		dAtA[i] = 0x10
		i++
		if m.WhereHandle {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.ColumnTypePresent != nil {
		nn1, err := m.ColumnTypePresent.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	if len(m.Value) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintLogProtocol(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	return i, nil
}

func (m *Column_Flag) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x18
	i++
	i = encodeVarintLogProtocol(dAtA, i, uint64(m.Flag))
	return i, nil
}
func (m *ColumnInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ColumnInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintLogProtocol(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Type) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintLogProtocol(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	return i, nil
}

func (m *TableInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TableInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Schema) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintLogProtocol(dAtA, i, uint64(len(m.Schema)))
		i += copy(dAtA[i:], m.Schema)
	}
	if len(m.Table) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintLogProtocol(dAtA, i, uint64(len(m.Table)))
		i += copy(dAtA[i:], m.Table)
	}
	if m.TableID != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintLogProtocol(dAtA, i, uint64(m.TableID))
	}
	if len(m.ColumnInfo) > 0 {
		for _, msg := range m.ColumnInfo {
			dAtA[i] = 0x22
			i++
			i = encodeVarintLogProtocol(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RowChangedEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RowChangedEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StartTs != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLogProtocol(dAtA, i, uint64(m.StartTs))
	}
	if m.CommitTs != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintLogProtocol(dAtA, i, uint64(m.CommitTs))
	}
	if m.RowID != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintLogProtocol(dAtA, i, uint64(m.RowID))
	}
	if m.Table != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintLogProtocol(dAtA, i, uint64(m.Table.Size()))
		n2, err := m.Table.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.Delete {
		dAtA[i] = 0x28
		i++
		if m.Delete {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.TableInfoVersion != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintLogProtocol(dAtA, i, uint64(m.TableInfoVersion))
	}
	if len(m.IndieMarkCol) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintLogProtocol(dAtA, i, uint64(len(m.IndieMarkCol)))
		i += copy(dAtA[i:], m.IndieMarkCol)
	}
	if len(m.Columns) > 0 {
		for k := range m.Columns {
			dAtA[i] = 0x42
			i++
			v := m.Columns[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovLogProtocol(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovLogProtocol(uint64(len(k))) + msgSize
			i = encodeVarintLogProtocol(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintLogProtocol(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintLogProtocol(dAtA, i, uint64(v.Size()))
				n3, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n3
			}
		}
	}
	if len(m.Keys) > 0 {
		for _, s := range m.Keys {
			dAtA[i] = 0x4a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *DDLEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DDLEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StartTs != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLogProtocol(dAtA, i, uint64(m.StartTs))
	}
	if m.CommitTs != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintLogProtocol(dAtA, i, uint64(m.CommitTs))
	}
	if len(m.Schema) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintLogProtocol(dAtA, i, uint64(len(m.Schema)))
		i += copy(dAtA[i:], m.Schema)
	}
	if len(m.Table) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintLogProtocol(dAtA, i, uint64(len(m.Table)))
		i += copy(dAtA[i:], m.Table)
	}
	if m.TableInfo != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintLogProtocol(dAtA, i, uint64(m.TableInfo.Size()))
		n4, err := m.TableInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if len(m.Query) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintLogProtocol(dAtA, i, uint64(len(m.Query)))
		i += copy(dAtA[i:], m.Query)
	}
	if len(m.Type) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintLogProtocol(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	return i, nil
}

func encodeVarintLogProtocol(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *TableName) Size() (n int) {
	var l int
	_ = l
	l = len(m.Schema)
	if l > 0 {
		n += 1 + l + sovLogProtocol(uint64(l))
	}
	l = len(m.Table)
	if l > 0 {
		n += 1 + l + sovLogProtocol(uint64(l))
	}
	if m.TableID != 0 {
		n += 1 + sovLogProtocol(uint64(m.TableID))
	}
	if m.Partition != 0 {
		n += 1 + sovLogProtocol(uint64(m.Partition))
	}
	return n
}

func (m *Column) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovLogProtocol(uint64(l))
	}
	if m.WhereHandle {
		n += 2
	}
	if m.ColumnTypePresent != nil {
		n += m.ColumnTypePresent.Size()
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovLogProtocol(uint64(l))
	}
	return n
}

func (m *Column_Flag) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovLogProtocol(uint64(m.Flag))
	return n
}
func (m *ColumnInfo) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovLogProtocol(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovLogProtocol(uint64(l))
	}
	return n
}

func (m *TableInfo) Size() (n int) {
	var l int
	_ = l
	l = len(m.Schema)
	if l > 0 {
		n += 1 + l + sovLogProtocol(uint64(l))
	}
	l = len(m.Table)
	if l > 0 {
		n += 1 + l + sovLogProtocol(uint64(l))
	}
	if m.TableID != 0 {
		n += 1 + sovLogProtocol(uint64(m.TableID))
	}
	if len(m.ColumnInfo) > 0 {
		for _, e := range m.ColumnInfo {
			l = e.Size()
			n += 1 + l + sovLogProtocol(uint64(l))
		}
	}
	return n
}

func (m *RowChangedEvent) Size() (n int) {
	var l int
	_ = l
	if m.StartTs != 0 {
		n += 1 + sovLogProtocol(uint64(m.StartTs))
	}
	if m.CommitTs != 0 {
		n += 1 + sovLogProtocol(uint64(m.CommitTs))
	}
	if m.RowID != 0 {
		n += 1 + sovLogProtocol(uint64(m.RowID))
	}
	if m.Table != nil {
		l = m.Table.Size()
		n += 1 + l + sovLogProtocol(uint64(l))
	}
	if m.Delete {
		n += 2
	}
	if m.TableInfoVersion != 0 {
		n += 1 + sovLogProtocol(uint64(m.TableInfoVersion))
	}
	l = len(m.IndieMarkCol)
	if l > 0 {
		n += 1 + l + sovLogProtocol(uint64(l))
	}
	if len(m.Columns) > 0 {
		for k, v := range m.Columns {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovLogProtocol(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovLogProtocol(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovLogProtocol(uint64(mapEntrySize))
		}
	}
	if len(m.Keys) > 0 {
		for _, s := range m.Keys {
			l = len(s)
			n += 1 + l + sovLogProtocol(uint64(l))
		}
	}
	return n
}

func (m *DDLEvent) Size() (n int) {
	var l int
	_ = l
	if m.StartTs != 0 {
		n += 1 + sovLogProtocol(uint64(m.StartTs))
	}
	if m.CommitTs != 0 {
		n += 1 + sovLogProtocol(uint64(m.CommitTs))
	}
	l = len(m.Schema)
	if l > 0 {
		n += 1 + l + sovLogProtocol(uint64(l))
	}
	l = len(m.Table)
	if l > 0 {
		n += 1 + l + sovLogProtocol(uint64(l))
	}
	if m.TableInfo != nil {
		l = m.TableInfo.Size()
		n += 1 + l + sovLogProtocol(uint64(l))
	}
	l = len(m.Query)
	if l > 0 {
		n += 1 + l + sovLogProtocol(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovLogProtocol(uint64(l))
	}
	return n
}

func sovLogProtocol(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozLogProtocol(x uint64) (n int) {
	return sovLogProtocol(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TableName) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TableName: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TableName: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Schema", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogProtocol
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Schema = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Table", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogProtocol
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Table = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableID", wireType)
			}
			m.TableID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TableID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Partition", wireType)
			}
			m.Partition = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Partition |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLogProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLogProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Column) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Column: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Column: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLogProtocol
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = append(m.Type[:0], dAtA[iNdEx:postIndex]...)
			if m.Type == nil {
				m.Type = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WhereHandle", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WhereHandle = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flag", wireType)
			}
			var v ColumnFlagType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (ColumnFlagType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ColumnTypePresent = &Column_Flag{v}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLogProtocol
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLogProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLogProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ColumnInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ColumnInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ColumnInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogProtocol
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLogProtocol
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = append(m.Type[:0], dAtA[iNdEx:postIndex]...)
			if m.Type == nil {
				m.Type = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLogProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLogProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TableInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TableInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TableInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Schema", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogProtocol
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Schema = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Table", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogProtocol
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Table = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableID", wireType)
			}
			m.TableID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TableID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColumnInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLogProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ColumnInfo = append(m.ColumnInfo, &ColumnInfo{})
			if err := m.ColumnInfo[len(m.ColumnInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLogProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLogProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RowChangedEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RowChangedEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RowChangedEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTs", wireType)
			}
			m.StartTs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTs |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommitTs", wireType)
			}
			m.CommitTs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommitTs |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RowID", wireType)
			}
			m.RowID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RowID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Table", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLogProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Table == nil {
				m.Table = &TableName{}
			}
			if err := m.Table.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delete", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Delete = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableInfoVersion", wireType)
			}
			m.TableInfoVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TableInfoVersion |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IndieMarkCol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogProtocol
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IndieMarkCol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Columns", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLogProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Columns == nil {
				m.Columns = make(map[string]*Column)
			}
			var mapkey string
			var mapvalue *Column
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLogProtocol
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLogProtocol
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthLogProtocol
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLogProtocol
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthLogProtocol
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthLogProtocol
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Column{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipLogProtocol(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthLogProtocol
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Columns[mapkey] = mapvalue
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keys", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogProtocol
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Keys = append(m.Keys, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLogProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLogProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DDLEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DDLEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DDLEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTs", wireType)
			}
			m.StartTs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTs |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommitTs", wireType)
			}
			m.CommitTs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommitTs |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Schema", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogProtocol
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Schema = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Table", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogProtocol
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Table = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLogProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TableInfo == nil {
				m.TableInfo = &TableInfo{}
			}
			if err := m.TableInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogProtocol
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Query = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLogProtocol
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = append(m.Type[:0], dAtA[iNdEx:postIndex]...)
			if m.Type == nil {
				m.Type = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLogProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLogProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLogProtocol(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLogProtocol
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLogProtocol
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLogProtocol
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthLogProtocol
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowLogProtocol
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipLogProtocol(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthLogProtocol = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLogProtocol   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("LogProtocol.proto", fileDescriptorLogProtocol) }

var fileDescriptorLogProtocol = []byte{
	// 549 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0xcd, 0x8a, 0x13, 0x41,
	0x10, 0xce, 0xfc, 0x6c, 0x92, 0xa9, 0x84, 0x6c, 0x6c, 0x96, 0x65, 0x58, 0xdc, 0x30, 0x0c, 0x08,
	0x61, 0x85, 0x1c, 0xa2, 0xa0, 0x78, 0x4c, 0xb2, 0x92, 0x85, 0x55, 0x64, 0x08, 0x5e, 0xa5, 0x37,
	0xe9, 0x4d, 0x86, 0xcc, 0x74, 0x67, 0x7b, 0x3a, 0x1b, 0xe6, 0xe6, 0x2b, 0x78, 0xf3, 0x79, 0x3c,
	0x79, 0xf4, 0x11, 0x24, 0x3e, 0x85, 0x37, 0xe9, 0x9a, 0xbf, 0xac, 0x7a, 0xd3, 0x5b, 0x7d, 0x55,
	0x35, 0x5d, 0x5f, 0x7d, 0xf5, 0x25, 0xf0, 0xe8, 0x5a, 0x2c, 0xdf, 0x49, 0xa1, 0xc4, 0x5c, 0x44,
	0x83, 0x8d, 0x0e, 0xfc, 0x3b, 0x70, 0x66, 0xf4, 0x26, 0x62, 0x6f, 0x69, 0xcc, 0xc8, 0x29, 0xd4,
	0x93, 0xf9, 0x8a, 0xc5, 0xd4, 0x35, 0x3c, 0xa3, 0xef, 0x04, 0x39, 0x22, 0x27, 0x70, 0xa4, 0x74,
	0x93, 0x6b, 0x62, 0x3a, 0x03, 0xc4, 0x85, 0x06, 0x06, 0x57, 0x13, 0xd7, 0xf2, 0x8c, 0xbe, 0x15,
	0x14, 0x90, 0x3c, 0x06, 0x67, 0x43, 0xa5, 0x0a, 0x55, 0x28, 0xb8, 0x6b, 0x63, 0xad, 0x4a, 0xf8,
	0x9f, 0x0c, 0xa8, 0x8f, 0x45, 0xb4, 0x8d, 0x39, 0x21, 0x60, 0xab, 0x74, 0xc3, 0x70, 0x5c, 0x3b,
	0xc0, 0x98, 0x78, 0xd0, 0xda, 0xad, 0x98, 0x64, 0x53, 0xca, 0x17, 0xf9, 0xc8, 0x66, 0x70, 0x98,
	0x22, 0x4f, 0xc0, 0xbe, 0x8d, 0xe8, 0x12, 0xa7, 0x76, 0x86, 0xc7, 0x83, 0xec, 0xb1, 0xd7, 0x11,
	0x5d, 0xce, 0xd2, 0x0d, 0x9b, 0xd6, 0x02, 0x2c, 0x6b, 0xd6, 0xf7, 0x34, 0xda, 0x32, 0x64, 0xd0,
	0x0e, 0x32, 0x30, 0x3a, 0x01, 0x32, 0xc7, 0x7e, 0xdd, 0xfb, 0x61, 0x23, 0x59, 0xc2, 0xb8, 0xf2,
	0x9f, 0x03, 0x64, 0xaf, 0x5c, 0xf1, 0x5b, 0xa1, 0x69, 0x71, 0x1a, 0xb3, 0x5c, 0x05, 0x8c, 0x4b,
	0xaa, 0x66, 0x45, 0xd5, 0xff, 0x68, 0xe4, 0xea, 0xe1, 0x57, 0xff, 0x4b, 0xbd, 0xa7, 0x00, 0xf3,
	0x92, 0x8b, 0x6b, 0x7b, 0x56, 0xbf, 0x35, 0x6c, 0x0d, 0x2a, 0x7a, 0xc1, 0x41, 0xd9, 0xff, 0x69,
	0xc2, 0x71, 0x20, 0x76, 0xe3, 0x15, 0xe5, 0x4b, 0xb6, 0xb8, 0xbc, 0x67, 0x5c, 0xe9, 0xa7, 0x13,
	0x45, 0xa5, 0x9a, 0x25, 0xc8, 0xc4, 0x0e, 0x0a, 0x48, 0xce, 0xa0, 0x39, 0x17, 0x71, 0x1c, 0xea,
	0x92, 0x89, 0xa5, 0x12, 0x6b, 0x9a, 0x52, 0xec, 0x4a, 0x3a, 0x19, 0x20, 0x5e, 0x41, 0x5e, 0x8b,
	0xd8, 0x1a, 0xc2, 0xa0, 0x74, 0x4b, 0xb1, 0xc8, 0x29, 0xd4, 0x17, 0x2c, 0x62, 0x8a, 0xb9, 0x47,
	0x78, 0xaa, 0x1c, 0x91, 0x0b, 0xe8, 0xaa, 0x42, 0x9b, 0xf7, 0x4c, 0x26, 0xda, 0x0b, 0x75, 0x9c,
	0xf9, 0x47, 0x9e, 0xf8, 0xd0, 0x0e, 0xf9, 0x22, 0x64, 0x6f, 0xa8, 0x5c, 0x8f, 0x45, 0xe4, 0x36,
	0x50, 0xa9, 0x07, 0x39, 0xf2, 0x02, 0x1a, 0xd9, 0xde, 0x89, 0xdb, 0x44, 0x4d, 0xce, 0x07, 0xbf,
	0x2d, 0x9e, 0x6b, 0x94, 0x5c, 0x72, 0x25, 0xd3, 0xa0, 0xe8, 0xd6, 0x97, 0x5b, 0xb3, 0x34, 0x71,
	0x1d, 0xcf, 0xd2, 0xd7, 0xd4, 0xf1, 0xd9, 0x18, 0xda, 0x87, 0xcd, 0xa4, 0x0b, 0xd6, 0x9a, 0xa5,
	0xf9, 0xe1, 0x74, 0x48, 0xce, 0x0b, 0xf7, 0x98, 0xb8, 0x78, 0x23, 0x7f, 0x3c, 0xb7, 0xd1, 0x2b,
	0xf3, 0xa5, 0xe1, 0x7f, 0x31, 0xa0, 0x39, 0x99, 0x5c, 0xff, 0x8b, 0xe8, 0x95, 0x67, 0xac, 0xbf,
	0x7b, 0xc6, 0x3e, 0xf4, 0x4c, 0x1f, 0x9c, 0x52, 0x3a, 0x54, 0xbb, 0x3c, 0x08, 0xfa, 0xa2, 0x2a,
	0xea, 0xef, 0xef, 0xb6, 0x4c, 0xa6, 0xa8, 0xb8, 0x13, 0x64, 0xa0, 0xf4, 0x70, 0xa3, 0xf2, 0xf0,
	0x85, 0x07, 0x9d, 0x87, 0xbf, 0x1f, 0xd2, 0x01, 0x18, 0x85, 0x9c, 0xca, 0x54, 0x67, 0xba, 0xb5,
	0x11, 0xf9, 0xba, 0xef, 0x19, 0xdf, 0xf6, 0x3d, 0xe3, 0xfb, 0xbe, 0x67, 0x7c, 0xfe, 0xd1, 0xab,
	0x4d, 0x8d, 0x9b, 0x3a, 0xfe, 0x7b, 0x3c, 0xfb, 0x15, 0x00, 0x00, 0xff, 0xff, 0xf6, 0xe6, 0x7f,
	0x7a, 0x52, 0x04, 0x00, 0x00,
}
